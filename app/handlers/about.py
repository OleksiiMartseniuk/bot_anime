import logging

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from service.api import ApiClient

from ..keyboards import reply
from ..states.about import AboutMessage


logger = logging.getLogger(__name__)


async def about_start(message: types.Message):
    """–û –±–æ—Ç–µ"""
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{message.from_user.id}] '
                f'–≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏—è [about]')

    # –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await ApiClient().sent_statistic(
        message.from_user.id,
        'about',
        '–û –±–æ—Ç–µ'
    )

    await AboutMessage.waiting_for_star_about.set()
    keyboard = reply.get_about()
    await message.answer('–î–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ —ç—Ç–∞–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. '
                         '–ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º,'
                         ' –º–∏ –±—É–¥–µ–º –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã.\n'
                         '–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è)', reply_markup=keyboard)


async def write_message(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è"""
    if message.text.lower() != '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è':
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ."
        )
        return
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è....‚úçÔ∏è',
        reply_markup=types.ReplyKeyboardRemove()
    )
    await AboutMessage.next()


async def send_message(message: types.Message, state: FSMContext):
    """–ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ db"""
    result = await ApiClient().sent_message(message.from_user.id, message.text)
    if not result:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!!!')
        logger.error('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è result –ø—É—Å—Ç–∞')
        await state.finish()
        return
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üì¨')
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è !!!')
    await state.finish()


def register_handlers_about(dp: Dispatcher):
    dp.register_message_handler(
        about_start,
        commands="about",
        state="*"
    )
    dp.register_message_handler(
        write_message,
        state=AboutMessage.waiting_for_star_about
    )
    dp.register_message_handler(
        send_message,
        state=AboutMessage.waiting_for_write_massage
    )
