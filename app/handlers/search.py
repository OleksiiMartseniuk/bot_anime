import logging

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from database.db import DataBaseClient

from service.api import ApiClient
from service.service import card, get_page_list

from ..states.search import SearchName
from ..keyboards import reply


logger = logging.getLogger(__name__)


async def search_start(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è....‚úçÔ∏è')
    await SearchName.waiting_for_name.set()


async def result_search(message: types.Message, state: FSMContext):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞"""
    data = await ApiClient().search(message.text.lower())

    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{message.from_user.id}]  '
                f'–∑–∞–¥–∞–ª –ø–æ–∏—Å–∫ [{message.text.lower()}]')

    if not data:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!!!')
        logger.error(f'–î–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–≤–µ—Ä–Ω—ã –∑–∞–ø—Ä–æ—Å '
                     f'[search({message.text.lower()})]')
        await state.finish()
        return

    # –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await DataBaseClient().set_statistics(
        message.from_user.id,
        'search',
        f'–ü–æ–∏—Å–∫ –ø–æ [{message.text.lower()}]'
    )

    if data['count'] == 0:
        await message.answer('–ù–µ—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...')
        await state.finish()
        return

    await message.answer(
        f"<b>–ù–∞–π–¥–µ–Ω–æ</b>: \t {data['count']} –∞–Ω–∏–º–µ",
        parse_mode=types.ParseMode.HTML,
    )

    page_list = get_page_list(data['count'])
    search = message.text.lower()
    await state.update_data(page_list=page_list, search=search)
    await SearchName.next()

    keyboard = reply.get_pagination()
    await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è:', reply_markup=keyboard)


async def pagination_search(message: types.Message, state: FSMContext):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
    if message.text.lower() == '–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É':
        user_data = await state.get_data()

        if user_data['page_list']:
            data = await ApiClient().search(
                user_data['search'],
                user_data['page_list'][-1]
            )
            for item in data['results']:
                await message.answer_photo(
                    item['url_image_preview_s'],
                    caption=card(item),
                    parse_mode=types.ParseMode.HTML
                )

            user_data['page_list'].pop()
            if not user_data['page_list']:
                await message.answer(
                    'üîö',
                    reply_markup=types.ReplyKeyboardRemove()
                )
                await state.finish()
                return
            await state.update_data(page_list=user_data['page_list'])


def register_handlers_search(dp: Dispatcher):
    dp.register_message_handler(
        search_start,
        commands="search",
        state="*"
    )
    dp.register_message_handler(
        result_search,
        state=SearchName.waiting_for_name
    )
    dp.register_message_handler(
        pagination_search,
        state=SearchName.waiting_for_page
    )
